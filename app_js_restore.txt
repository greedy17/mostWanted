"use strict"
/*
Build all of your functions for displaying and gathering information below (GUI).
*/

// app is the function called to start the entire application
function app(people){
  let searchType = promptFor("Do you know the name of the person you are looking for? Enter 'yes' or 'no'", yesNo).toLowerCase();
  let searchResults;
  switch(searchType){
    case 'yes':
      searchResults = searchByName(people);
      displayPeople(searchResults);
      if (searchResults.length > 0) {
        mainMenu(searchResults[0],people);
      }
      
      break;
    case 'no':
      searchResults = searchByTraits(people);
      displayPerson(searchResults[git pu]);
      break;
      default:
    app(people); // restart app
      break;
  }
  //some time of logic that shows if there is more than one. if length of array if only one then send out index 0.
  // Call the mainMenu function ONLY after you find the SINGLE person you are looking for

function mainMenu(person, people){

  let firstName = person.firstName; /* Here we pass in the entire person object that we found in our search, as well as the entire original dataset of people. We need people in order to find descendants and other information that the user may want. */
  let lastName = person.lastName
  if(!person){
    alert("Could not find that individual.");
    return app(people); // restart
  }

  let displayOption = prompt("Found " + firstName + " " + lastName + " . Do you want to know their 'info', 'family', or 'descendants'? Type the option you want or 'restart' or 'quit'");
    switch(displayOption){
    case "info":
<<<<<<< HEAD
    
    break;
    case "family":
      immediateFamily(person, people);
    break;
    case "descendants":
      let parents = searchDecendants(person, people);
      displayPeople(parents);
=======
    displayPerson(person);
    break;
    case "family":
    findFamily(people,person);
    break;
    case "descendants":
    findDescendants(people, person);
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
    break;
    case "restart":
    app(people); // restart
    break;
    case "quit":
    return; // stop execution
    default:
    return mainMenu(person, people); // ask again
  }
}

function immediateFamily(person, people){
  let parents = [];
  let siblings = [];
  let kids = [];
  let spouse = ""; 

  for (let i = 0; i < people.length; i++) {
    for (let x = 0; x < people[i].parents.length; x++) {
      if (people[i].parents[x] === person.id) {
        kids.push(people[i]);
      }    
    }
    if (people[i].id === person.currentSpouse) {
          spouse = people[i].firstName + " " + people[i].lastName;
    }
  }
  for (let y = 0; y < person.parents.length; y++) {
    for (let z = 0; z < people.length; z++) {
       if (person.parents[y] === people[z].id) {
         parents.push(people[z]);
       }    
    }    
  }
  if (parents.length > 0) {
    for (let f = 0; f < people.length; f++) {
      for (let x = 0; x < people[f].parents.length; x++) {
        for (let w = 0; w < parents.length; w++) {
          if (parents[w].id === people[f].parents[x] && people[f].id != person.id) {
            siblings.push(people[f]);
          }
        }
      }
    } 
  }

  let message = "";
  if (parents.length > 0) {
    message = "The parents found: " +
    parents.map(function(parent){
      return parent.firstName + " " + parent.lastName;
    }).join("\n")
  }
  if (spouse != "") {
    message = message + " \n The current spouse is: " + spouse;
  }
  if (siblings.length > 0) {
    message = message +   " \n The siblings are: " + 
    siblings.map(function(s){
      return s.firstName + " " + s.lastName;
    }).join("\n");
  }
  if (kids.length > 0) {
    message = message + "\n The kids found are: " + 
    kids.map(function(k){
      return k.firstName + " " + k.lastName;
    }).join("\n");
  }
  alert(message);
} 

var descendants = [];
var counter = 0;
//need to ask about recursive 
function searchDecendants(person, people) {
  counter = 0;
  descendants = [];
  recursionSearch(person.id,people);
  return descendants;
}
function recursionSearch(id,people){
  //console.log(counter);
  for (let x = 0; x < people[counter].parents.length; x++) {
    if (people[counter].parents[x] === id) {
      descendants.push(people[counter]);
    }    
  }
  if (counter < 21) {
    counter++;
    recursionSearch(id,people);
  }
}

function searchByName(people){
  let firstName = promptFor("What is the person's first name?", chars).toLowerCase();
  let lastName = promptFor("What is the person's last name?", chars).toLowerCase();

  let foundPerson = people.filter(function(person){
    if(person.firstName.toLowerCase() === firstName && person.lastName.toLowerCase() === lastName){
      return true;
    }
    else {
      return false;
<<<<<<< HEAD
     }
    })
 
  return foundPerson;
=======
    }
  })

    return foundPerson[0];
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
}
// alerts a list of people
function displayPeople(people){
<<<<<<< HEAD
  if (people.length === 0) {
    alert("You search did not find any results");
  }else{
    alert(people.map(function(person){
      return person.firstName + " " + person.lastName;
    }).join("\n"));
  }
}

function displayPerson(person){
  let personInfo = "Id: " + person.id + "\n";
  personInfo = "First Name: " + person['firstName'] + "\n";
=======
  alert(people.map(function(person){
    return person.firstName + " " + person.lastName;
  }).ioin("\n"));
}

function displayPerson(person){
  let personInfo = "First Name: " + person.firstName + "\n";
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
  personInfo += "Last Name: " + person.lastName + "\n";
  personInfo += "Gender: " + person.gender + "\n";
  personInfo += "DOB: " + person.dob + "\n";
  personInfo += "Height: " + person.height + "\n";
  personInfo += "Weight: " + person.weight + "\n";
  personInfo += "Eye color: " + person.eyeColor + "\n";
  personInfo += "Occupation: " + person.occupation;

  alert(personInfo);
  return personInfo;
}

// function that prompts and validates user input
function promptFor(question, valid){
  do{
    var response = prompt(question).trim();
  } while(!response || !valid(response));
  return response;
}

// helper function to pass into promptFor to validate yes/no answers
function yesNo(input){
  return input.toLowerCase() == "yes" || input.toLowerCase() == "no";
}

// helper function to pass in as default promptFor validation
function chars(input){
  return true; // default validation only
}

<<<<<<< HEAD

function searchByTraits(people, originalPeople = null) {
  let searchResults = [];
  let userInput = promptFor("What trait would you like to search for? Please choose: height, weight, gender, dob, eyeColor, occcupation, parents or CurrentSpouse or done when finished.",chars)
  switch (userInput.toLowerCase()) {
    case "height":
      searchResults = searchByHeight(people);
      break;
    case "weight":
      searchResults = searchByWeight(people);
      break;
    case "gender":
      searchResults = searchByGender(people);
      break;
    case "dob":
      searchResults = searchByDOB(people);
      break;
    case "eyeColor":
      searchResults = searchByEyeColor(people);
      break;
    case "occupation":
      searchResults = searchByOccupation(people);
      break;
    case "parents":
      searchResults = searchByParents(people);
      break;
    case "spouse":
      searchResults = searchByCurrentSpouse(people);
      break;
    case "done":
      searchResults = displayPeople(people);
      break;
    default:
      return searchByTraits(searchResults, people);
    
  }
  return searchByTraits(searchResults, people);
}

function searchByHeight(people){
  let height = promptFor("What is the person's height?", chars);
  let foundPerson = people.filter(function(person){
    if(person.height.toString() === height){
=======
function searchByGender(people){
  let gender = promptFor("What is the person's gender?", chars);
  let foundPerson = people.filter(function(person){
    if(person.gender === gender){
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
      return true;
    }
    else{
      return false;
    }
  })
  return foundPerson;
}

function searchByDOB(people){
  let DOB = promptFor("What is the person's DOB? m/d/yyyy", chars);
  let foundPerson = people.filter(function(person){
<<<<<<< HEAD
    if(person.weight.toString() === weight){ //string convert or ==
=======
    if(person.dob === DOB){
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
      return true;
    }
    else{
      return false;
    }
  })
<<<<<<< HEAD
    return foundPerson;
}

//search by gneder
function searchByGender(people){
  let gender = promptFor("What is the person's gender?", chars);
  let foundPerson = people.filter(function(person){
    if(person.gender === gender){
=======
    return foundPerson;
}

function searchByEyeColor(people){
  let eyeColor = promptFor("What is the person's eye color?", chars);
  let foundPerson = people.filter(function(person){
    if(person.eyeColor === eyeColor){
      return true;
    }
    else{
      return false;
    }
  })
    return foundPerson;
}

function searchByEyesAndGender(people){
  let eyeColor = promptFor("What is the person's eye color?", chars);
  let gender = promptFor("What is the person's gender?", chars);
  let foundPerson = people.filter(function(person){
    if(person.eyeColor === eyeColor && person.gender === gender){
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
      return true;
    }
    else{
      return false;
    }
  })
    return foundPerson;
}

<<<<<<< HEAD
//changed inputs to string to avoid typemismatch
function searchByDOB(people){
  let dob = promptFor("What is the person's dob?", chars);
  let foundPerson = people.filter(function(person){
    if(toString(person.dob) === toString(dob)){
=======
function searchByEyesAndDOB(people){
  let eyeColor = promptFor("What is the person's eye color?", chars);
  let DOB = promptFor("What is the person's dob?", chars);
  let foundPerson = people.filter(function(person){
    if(person.eyeColor === eyeColor && person.dob === DOB){
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
      return true;
    }
    else{
      return false;
    }
  })
<<<<<<< HEAD
    return foundPerson;
}

//search by eye color
function searchByEyeColor(people){
  let eyeColor = promptFor("What is the person's eye color?", chars);
  let foundPerson = people.filter(function(person){
    if(person.eyeColor === eyeColor){
=======
    for(let i = 0; i < foundPerson.length; i++)
    return foundPerson[i];
}

function searchByGenderAndDOB(people){
  let DOB = promptFor("What is the person's dob?", chars);
  let gender = promptFor("What is the person's gender?", chars);
  let foundPerson = people.filter(function(person){
    if(person.dob === DOB && person.gender === gender){
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
      return true;
    }
    else{
      return false;
    }
  })
    return foundPerson;
}

<<<<<<< HEAD
//search by occupation
function searchByOccupation(people){
  let occupation = promptFor("What is the person's occupation?", chars);
  let foundPerson = people.filter(function(person){
    if(person.occupation === occupation){
=======
function findSpouse(people, person){
  let mySpouse = people.filter(function(i){
    if (i.currentSpouse === person.id){
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
      return true;
    }else{
      return false;
    }
  })
  if(mySpouse.length > 0){
    alert("Spouse: " + mySpouse[0].firstName + " " + mySpouse[0].lastName);
  }else{
    alert(person.firstName + " has no spouse on file.");
  }
}

<<<<<<< HEAD
//search by parents
function searchByParents(people){
  let parents = promptFor("Who are the person's parents?", chars);
  let foundPerson = people.filter(function(person){
    if(person.parents === parents){
=======
function findParents(people, person){
  let myParents = people.filter(function(i){
    if (person.parents[0] === i.id || person.parents[1] === i.id){
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
      return true;
    }else{
      return false;
    }
  })
  if(myParents.length === 0){
    alert(person.firstName + " does not have any parents on file.")
  }
  for(let i = 0; i < myParents.length; i++){
    if(myParents[i].gender === "male"){
      alert("Father: " + myParents[i].firstName + " " + myParents[i].lastName);
    }else{
      alert("Mother: " + myParents[i].firstName + " " + myParents[i].lastName);
    }
  }
}

<<<<<<< HEAD
//search by current spouse
function searchByCurrentSpouse(people){
  let currentSpouse = promptFor("Who is the person's current spouse?", chars);
  let foundPerson = people.filter(function(person){
    if(person.currentSpouse === currentSpouse){
      return true;
=======
function findSiblings(people, person){
  let mySiblings = people.filter(function(i){
      if(i.parents[0] === person.parents[0] && i.parents.length > 0){
        return true;
      }else{
        return false;
      }
  })
  if(mySiblings.length === 0 || mySiblings[0].id === person.id){
    alert(person.firstName + " does not have any siblings on file.");
  }
  for(let i = 0; i < mySiblings.length; i++){
    if(mySiblings[i].gender === "male" && mySiblings[i].id != person.id){
      alert("Brother: " + mySiblings[i].firstName + " " + mySiblings[i].lastName);
    }else if(mySiblings[i].gender === "female" && mySiblings[i].id != person.id){
      alert("Sister: " + mySiblings[i].firstName + " " + mySiblings[i].lastName);
>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
    }
  }
}

function findDescendants(people, person){
  let myDescendants = people.filter(function(i){
    if(person.id === i.parents[0] || person.id === i.parents[1]){
      return true;
    }else{
      return false;
    }
  })
<<<<<<< HEAD
  // TODO: find the person using the height they entered
    return foundPerson;
}
}

=======
  if(myDescendants.length === 0){
    alert(person.firstName + " does not have any descendants on file.");
  } 
  for(let i = 0; i < myDescendants.length; i++){
    if(myDescendants[i].gender === "male"){
      alert("Son: " + myDescendants[i].firstName + " " + myDescendants[i].lastName);
    }else{
      alert("Daughter: " + myDescendants[i].firstName + " " + myDescendants[i].lastName);
    }
  }
}

function findFamily(people, person){
  findParents(people,person);
  findSiblings(people, person);
  findSpouse(people, person);
}

function searchByTraits(people){
  let trait = prompt("Lets try a different approach. Search by: 'eye color', 'gender', 'dob', 'eyes and gender', 'eyes and dob', or 'gender and dob'?");
  if(trait === "eye color"){
    searchByEyeColor(people);
    }else if(trait === "gender"){
    searchByGender(people);
    }else if(trait === "dob"){
    searchByDOB(people);
    }else if(trait === "eyes and gender"){
    searchByEyesAndGender(people);
    }else if(trait === "eyes and dob"){
    searchByEyesAndDOB(people);
    }else if(trait === "gender and dob"){
    searchByGenderAndDOB(people);
    }else{
    alert("Invalid selection");
    searchByTraits(people);
    }
}


>>>>>>> 0d098364683cf408cb85e7c99ba428aec7ad564f
